package Matriz;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Escalar extends javax.swing.JFrame {

    public Escalar(String filas, String columnas) {
        initComponents();
        
        int num_filas = Integer.parseInt(filas) + 1;
        int num_columnas = Integer.parseInt(columnas) + 1;
        
        int matriz1[][] = new int[num_filas][num_columnas];
        int matriz2[][] = new int[num_filas][num_columnas];
        
        for (int x = 0; x < matriz1.length; x++) {
            for (int y = 0; y < matriz1[x].length; y++) {
                matriz1[x][y] = 0;
                
                DefaultTableModel modelo = new DefaultTableModel(x, y);
                jTable1.setModel(modelo);
            }
        }

        for (int x = 0; x < matriz1.length; x++) {
            for (int y = 0; y < matriz1[x].length; y++) {
                matriz1[x][y] = 0;
                
                DefaultTableModel modelo = new DefaultTableModel(x, y);
                jTable1.setModel(modelo);
            }
        }
   
    }
 public float [][] leerTablaA() {
        int nFilas = jTable1.getRowCount();
        int nColumnas = jTable1.getColumnCount();
        float[][] matriz = new float[nFilas][nColumnas];
        
        for (int i = 0; i < nFilas; i++) {
            for (int j = 0; j < nColumnas; j++) {
                try {
                    if (String.valueOf(jTable1.getValueAt(i, j)).equals("")) {
                        jTable1.setValueAt(0, i, j);
                        matriz[i][j] = Float.parseFloat(String.valueOf(jTable1.getValueAt(i, j)));
                    } else {
                        matriz[i][j] = Float.parseFloat(String.valueOf(jTable1.getValueAt(i, j)));
                    }
                } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Verifique sean Numeros ", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        return  matriz;
    }
 public float[][] EscalarMatrices(float matrizA[][], float Numero,  int nFilas, int nColumnas) {
        float[][] matrizB = new float[nFilas][nColumnas];

        for (int iFilas = 0; iFilas < nFilas; iFilas++) {
            for (int iColumnas = 0; iColumnas < nColumnas; iColumnas++) {
                
                matrizB[iFilas][iColumnas] =
                        matrizA[iFilas][iColumnas]  * Numero;
                
            }
                
        }
        
        DefaultTableModel tablaB   = (DefaultTableModel) jTable2.getModel();
        tablaB.setRowCount(matrizB.length);
        tablaB.setColumnCount(matrizB[0].length);
        
        for (int i = 0; i < matrizB.length; i++) {
            for (int j = 0; j < matrizB[0].length; j++) {
                jTable2.setValueAt(matrizB[i][j], i, j);
            }
            
        }
        return matrizB;
    }
 
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        calcular = new javax.swing.JButton();
        Num = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Escalar");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable2);

        calcular.setText("Calcular");
        calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularActionPerformed(evt);
            }
        });

        jLabel1.setText("Numero Multiplicador");

        jLabel2.setText("Matriz");

        jLabel3.setText("Resultado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Num, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(calcular))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calcular)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularActionPerformed
  // se declara la variable numero
        float Numero;
            try {    
        Numero=Integer.parseInt(Num.getText());
              
     float[][] matrizA = leerTablaA();
      
            EscalarMatrices(matrizA,Numero, matrizA.length, matrizA[0].length);            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "verifique que sea numero un multiplicador", "Error", JOptionPane.ERROR_MESSAGE);
        }
                
    }//GEN-LAST:event_calcularActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Num;
    private javax.swing.JButton calcular;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
